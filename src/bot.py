import asyncio
import json
import os
import re
from dotenv import load_dotenv
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, PollAnswer, InputPollOption, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery

from database import DatabaseManager, Polls, Chats

load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN")

Db = DatabaseManager()

dp = Dispatcher()
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML,
        disable_notification=True,

    )
)


@dp.message(CommandStart())
async def handle_start(message: Message):
    is_group = str(message.chat.id).startswith("-")

    if is_group:
        chat_exists, is_set = Db.check_new(message.chat.id)
        chat_member_count = await message.chat.get_member_count()
        chat_admins = await message.chat.get_administrators()

        if not chat_exists:
            Db.upsert(
                Chats,
                {},
                {
                    "chat_id": message.chat.id,
                    "player_count": chat_member_count,
                }
            )

            message_start = f"""–í–µ—á–µ—Ä –≤ —á–∞–π –í–∞–º, —Ä–∞–±–æ—Ç—è–≥–∏/—Ä–∞–±–æ—Ç—è–≥–∏–Ω–∏.
            
–Ø –±–æ—Ç –∏ —è –Ω–∞–≤–æ–∂—É –ø–æ—Ä—è–¥–æ–∫ –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö.
–û—á–µ–Ω—å —Å–∫–æ—Ä–æ —è —Å–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –í–∞—à–∏ –∏–≥—Ä—ã, –∫–æ–º–∞–Ω–¥—ã –∞ –≥–ª–∞–≤–Ω–æ–µ - –∂–µ—Å—Ç–∫–æ –æ–ø—É—Å–∫–∞—Ç—å —Ç–µ—Ö –∫—Ç–æ –Ω–µ —Ö–æ–¥–∏—Ç –∏–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª.

–ù–æ —ç—Ç–æ –ø–æ—Ç–æ–º.

–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—É—Ç –µ—Å—Ç—å –≤ —á–∞—Ç–µ.

–¢–µ–ª–µ–≥—Ä–∞–º –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è –æ –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –Ø –∫–∞–∫ –±—ã –•–ó –∫—Ç–æ –µ—Å—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –±–µ–∑—É–¥–µ—Ä–∂–Ω–æ–º—É –≤–µ—Å–µ–ª—å—é:

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –Ø –¥–∞–º –∑–Ω–∞—Ç—å –í–∞—à–∏–º –∞–¥–º–∏–Ω–∞–º: —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª–µ–µ.

–ñ–ú–ò–¢–ï –ö–ù–û–ü–ö–£ –í–ù–ò–ó–£ –ï–°–õ–ò –í–´ –§–£–¢–ë–û–õ–Å–†–´!
"""

            init_message = await message.answer(
                text=message_start,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="ü§ô–Ø –ì–û–¢–û–íü§ô", callback_data=f"init{message.chat.id}")]
                    ]
                )
            )

            await bot.pin_chat_message(
                chat_id=message.chat.id,
                message_id=init_message.message_id,
            )

        elif is_set:
            await message.answer(
                "–¢—É—Ç —É–∂–µ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!"
            )

    else:
        await message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç - –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤, –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫. –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ."
        )


def handle_init_button(callback_data: CallbackQuery):
    user_data = callback_data.from_user
    chat_id = callback_data.message.chat.id

    players_json = Db.get_data(Chats, {"chat_id": chat_id}).players
    if players_json == {}:
        players = {}
    else:
        players = json.loads(players_json)

    players[user_data.id] = {
        "username": "@" + user_data.username,
        "skill": 0,
    }

    Db.upsert(
        Chats,
        {"chat_id": chat_id},
        {"players": json.dumps(players)}
    )

    return True if len(players.keys()) > 7 else False


@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    callback_data = callback.data

    if callback_data.startswith("init"):
        handle_init_button(callback)
        callback_response = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üòâ@{callback.from_user.username}, —è –≤–∏–∂—É —Ç–µ–±—è, –∏–≥—Ä–æ–∫!üòâ"
        )

        await asyncio.sleep(10)
        await bot.delete_message(callback.message.chat.id, callback_response.message_id)


@dp.message(Command('setup'))
async def handle_players_setup(message: Message):
    admins = await bot.get_chat_administrators(chat_id=message.chat.id)
    admins_list = [admin.user.id for admin in admins if admin.user.is_bot is False]

    if message.from_user.id in admins_list:
        players = Db.get_data(Chats, {"chat_id": message.chat.id}).players
        rate_call = """–°–∫–æ–ø–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ —á–∞—Ç\n\n–ù–û –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –æ—Ç 1 –¥–æ 10."""
        example = """–ü—Ä–∏–º–µ—Ä:\n\n–ò–≥—Ä–æ–∫ 1: 5\n–ò–≥—Ä–æ–∫ 2: 7"""
        admins_name = [admin.user.username for admin in admins if admin.user.is_bot is False and admin.user.username is not None]
        print(admins_name)

        if players != {}:
            players = json.loads(players)

        players_list = "\n".join([player['username']+ ": " for k, player in players.items()])

        if len(players.keys()) > 1:  # TODO: Add admins list
            await message.answer(
                f"–ü—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ –∫–æ–º—É —Ç–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –≤ —ç—Ç–æ–π "
                f"–∫–æ–Ω—Ñ–µ.\n\n{rate_call}\n\n{example}"
            )
            await message.answer(
                f"–£—Ä–æ–≤–µ–Ω—å –∑–¥–µ—à–Ω–∏—Ö —Ñ—É—Ç–±–æ–ª—ë—Ä–æ–≤:\n{players_list}"
            )
    else:
        await message.answer(
            "–¢–∞–∫–æ–µ —Ç—É—Ç –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫..."
        )


@dp.message(Command("poll"))
async def handle_poll_creation(message: Message):
    Db.close_all_polls()
    date_time = message.text.strip("/poll ")
    player_count = await message.chat.get_member_count()
    call_to_arms = f"‚öΩ‚öΩÔ∏èÔ∏è–ú—É–∂—á–∏–Ω—ã, —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥–Ω–∞—è –∫–∞—Ç–∫–∞.\n\n{date_time}\n\n –í–∏–∂—É —á—Ç–æ –≤–∞—Å —Ç—É—Ç {player_count}.‚öΩ‚öΩÔ∏è"

    created_poll = await bot.send_poll(
        chat_id=message.chat.id,
        question=call_to_arms,
        options=[
            InputPollOption(text="‚úÖ–Ø –≤ –¥–µ–ª–µ‚úÖ"),
            InputPollOption(text="‚ùå–°–∞–º–∏ –ø–∏–Ω–∞–π—Ç–µ —ç—Ç—É —Ö—É–π–Ω—é‚ùå")
        ],
        is_anonymous=False,

    )

    Db.upsert(
        Polls,
        {"poll_id": created_poll.poll.id},
        {
            "chat_id": message.chat.id,
            "poll_id": created_poll.poll.id,
            "poll_message_id": created_poll.message_id,
            "timestamp": datetime.now(),
            "voters": json.dumps({}),
            "is_closed": created_poll.poll.is_closed
        }
    )

    await bot.pin_chat_message(created_poll.chat.id, created_poll.message_id)


@dp.message(Command("close_poll"))
async def handle_close_poll(message: Message):
    poll_data = Db.get_data(Polls, {"chat_id": message.chat.id})

    poll_message_id = poll_data.poll_message_id

    if poll_message_id:
        poll_results = await bot.stop_poll(
            message.chat.id,
            poll_message_id

        )

        text = Db.get_poll_results(poll_results.id)
        cool_list = "\n".join(['@' + text[user]['username'] for user in text.keys() if text[user]['vote'] == 0])
        bad_list = "\n".join(['@' + text[user]['username'] for user in text.keys() if text[user]['vote'] == 1])

        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∞–ø–ª–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–∏–ª—å–Ω—ã–º –º—É–∂—á–∏–Ω–∞–º: \n{cool_list}"
        )

        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–ê —ç—Ç–∏–º –∞–Ω–∞–ª—å–Ω—ã–º —Å–ª–∏–∑–Ω—è–º –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å. –§—É –±–ª—è...: \n{bad_list}"
        )

        Db.close_poll(message.chat.id)


@dp.poll_answer()
async def handle_poll_answer(poll: PollAnswer):
    chat_id, chat_message = Db.get_poll_data(poll.poll_id)
    selected_option_ids = poll.option_ids

    if not chat_message:
        return

    if 0 in selected_option_ids:
        Db.update_poll_vote(poll.poll_id, poll.user.id, poll.user.username, poll.option_ids[0])

    elif 1 in selected_option_ids:
        Db.update_poll_vote(poll.poll_id, poll.user.id, poll.user.username, poll.option_ids[0])

    vote_count = Db.get_vote_count(poll.poll_id)

    if vote_count == 8:
        await bot.send_message(
            chat_id,
            "–í–∞—Å —É–∂–µ 8! –£–∂–µ –≤–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å! –ù—É–∫–∞ –∑–∞–±—Ä–æ–Ω–∏–ª–∏, –±—ã—Å—Ç—Ä–æ!"
        )


@dp.message(F.text)
async def handle_text(message: Message):
    admins = await bot.get_chat_administrators(chat_id=message.chat.id)
    admins_list = [admin.user.id for admin in admins if admin.user.is_bot is False]
    if message.from_user.id in admins_list:
        await handle_players_rating(message)


async def handle_players_rating(message):
    if message.text.startswith("–£—Ä–æ–≤–µ–Ω—å –∑–¥–µ—à–Ω–∏—Ö —Ñ—É—Ç–±–æ–ª—ë—Ä–æ–≤:\n"):
        text = message.text.strip("–£—Ä–æ–≤–µ–Ω—å –∑–¥–µ—à–Ω–∏—Ö —Ñ—É—Ç–±–æ–ª—ë—Ä–æ–≤:\n")
        pattern = r"@(\w+):\s*(\d+)"

        matches = re.findall(pattern, text)

        result = {"@" + username: int(score) for username, score in matches}

        players_json = Db.get_data(Chats, {'chat_id': message.chat.id}).players
        players = json.loads(players_json)
        for k, v in players.items():
            existing_username = v['username']
            if existing_username in result.keys():
                players[k]['skill'] = result[existing_username]

        Db.upsert(Chats, {'chat_id': message.chat.id}, {
            'players': json.dumps(players),
            'is_set': True,

        })
        await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª!\n\n –≠—Ç–æ—Ç —á–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∫–∞—Ç–∫–∞–º.")


async def mainloop():
    await dp.start_polling(bot)
