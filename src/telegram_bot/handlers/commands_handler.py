import datetime
import json
from pprint import pformat

from abc import ABC, abstractmethod
from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, InputPollOption, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command

from src.database.database import DatabaseManager, Polls, Chats, Admins
from src.telegram_bot.responses import texts

from src.telegram_bot.handlers.callbacks_handler import InitCallback, TeamManagerCallback


async def players_list_extractor(existing_players):
    if isinstance(existing_players, str):
        existing_players_dict = json.loads(existing_players)
    else:
        existing_players_dict = existing_players
    return existing_players_dict

# --- DECORATORS ---

def group_only(func):
    async def wrapper(self, message: Message, *args, **kwargs):
        if not str(message.chat.id).startswith("-"):
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        return await func(self, message, *args, **kwargs)

    return wrapper


def admin_only(func):
    async def wrapper(self, message: Message, *args, **kwargs):
        admins = await self.bot.get_chat_administrators(chat_id=message.chat.id)
        admins_list = [admin.user.id for admin in admins if not admin.user.is_bot]
        if message.from_user.id not in admins_list:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        return await func(self, message, *args, **kwargs)

    return wrapper


def personal_only(func):
    async def wrapper(self, message: Message, *args, **kwargs):
        if str(message.chat.id).startswith("-"):
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return
        return await func(self, message, *args, **kwargs)

    return wrapper


def bot_is_admin(func):
    async def wrapper(self, message: Message, *args, **kwargs):
        admins = await self.bot.get_chat_administrators(chat_id=message.chat.id)
        admins_list = [admin.user.id for admin in admins if admin.user.is_bot]
        if message.bot.id not in admins_list:
            await message.answer(texts.make_bot_admin)
            return

        return await func(self, message, *args, **kwargs)

    return wrapper


class BaseCommandHandler(ABC):
    def __init__(self, bot: Bot, db: DatabaseManager):
        self.bot = bot
        self.db = db

    @abstractmethod
    def register(self, router: Router):
        pass


class StartCommandHandler(BaseCommandHandler):
    def register(self, router: Router):
        router.message.register(
            self.handle_group_start, CommandStart(), (F.chat.type == "group") | (F.chat.type == "supergroup")
        )
        router.message.register(
            self.handle_private_start, CommandStart(), (F.chat.type == "private")
        )

    @group_only
    @bot_is_admin
    async def handle_group_start(self, message: Message, *args, **kwargs):
        await self.initial_start(message)

    async def initial_start(self, message: Message):
        """Sends initial message and collects important data regarding chat members"""
        group_data = self.db.get_data(Chats, {"chat_id": message.chat.id})

        if not group_data:

            admin_id, admin_username, admins_list = await self.get_admins_json(message)
            chat_name = message.chat.title

            self.db.upsert(
                Admins,
                {
                    "chat_id": message.chat.id,
                },
                {
                    "admin_id": admin_id,
                    "admin_username": admin_username,
                    "chat_id": message.chat.id,
                    "chat_name": chat_name,

                }
            )

            message_start = texts.first_start
            init_message = await message.answer(
                text=message_start,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="ü§ô–Ø –ì–û–¢–û–íü§ô",
                                callback_data=InitCallback(
                                    chat_id=message.chat.id,
                                ).pack()
                            )
                        ]
                    ]
                )
            )

            await self.bot.pin_chat_message(
                chat_id=message.chat.id,
                message_id=init_message.message_id,
            )

            self.db.upsert(
                Chats,
                {"chat_id": message.chat.id},
                {
                    "chat_id": message.chat.id,
                    "start_message": init_message.message_id,

                }
            )

        else:
            await message.answer("–í—ã —É–∂–µ –≤—Å—ë –∑–∞–ø—É—Å—Ç–∏–ª–∏...")

    async def get_admins_json(self, message: Message):
        chat_admins = await message.chat.get_administrators()
        admins_list = [admin.user.id for admin in chat_admins]

        for admin in chat_admins:
            if admin.status == 'creator':
                owner_id = admin.user.id
                owner_username = admin.user.username
                display_name = f"@{owner_username}" if owner_username else "–í–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"
                return owner_id, display_name, admins_list

        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", None

    @personal_only
    async def handle_private_start(self, message: Message, *args, **kwargs):
        # await message.answer(texts.private_start)
        #
        # managed_teams = self.db.get_data(Admins, {"admin_id": message.chat.id}, all_records=True)
        # if managed_teams:
        #     teams_list_inline = [
        #         [
        #             InlineKeyboardButton(
        #                 text=team.chat_name,
        #                 callback_data=TeamManagerCallback(chat_id=team.chat_id).pack()
        #             ) for team in managed_teams
        #         ]
        #     ]
        #
        #     await message.answer(
        #         text="–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:",
        #         reply_markup=InlineKeyboardMarkup(inline_keyboard=teams_list_inline),
        #
        #     )

        await message.answer("–ü–æ–∫–∞ —ç—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –¥—Ä—É–∂–æ–∫ - –ø–∏—Ä–æ–∂–æ–∫...")


class SetupCommandHandler(BaseCommandHandler):
    def register(self, router: Router):
        router.message.register(self.handle, Command("setup"))

    @group_only
    @admin_only
    async def handle(self, message: Message):
        admins = await self.bot.get_chat_administrators(chat_id=message.chat.id)
        admins_list = [admin.user.id for admin in admins if not admin.user.is_bot]

        if message.from_user.id in admins_list:
            players = self.db.get_data(Chats, {"chat_id": message.chat.id}).players
            if players != {}:
                players = json.loads(players)

            if len(players.keys()) > 1:
                players_list = "\n".join([player['username'] + ": " for k, player in players.items()])
                await message.answer(
                    "–ü—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ –∫–æ–º—É —Ç–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ.\n\n"
                    "–°–∫–æ–ø–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ —á–∞—Ç\n\n"
                    "–ù–û –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –æ—Ç 1 –¥–æ 10.\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n\n–ò–≥—Ä–æ–∫ 1: 5\n–ò–≥—Ä–æ–∫ 2: 7"
                )
                await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –∑–¥–µ—à–Ω–∏—Ö —Ñ—É—Ç–±–æ–ª—ë—Ä–æ–≤:\n{players_list}")
        else:
            await message.answer("–¢–∞–∫–æ–µ —Ç—É—Ç –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫...")


class PollOpenCommandHandler(BaseCommandHandler):
    def register(self, router: Router):
        router.message.register(self.handle, Command("start_poll"))

    @group_only
    @bot_is_admin
    @admin_only
    async def handle(self, message: Message, *args, **kwargs):
        all_polls = self.db.get_data(
            Polls,
            {
                "chat_id": message.chat.id,
                "is_closed": False,

            },
            all_records=True
        )

        for poll in all_polls:
            await self.bot.delete_message(
                chat_id=message.chat.id,
                message_id=poll.poll_message_id
            )

        self.db.bulk_update(
            Polls,
            {"chat_id": message.chat.id},
            {"is_closed": True},

        )

        call_to_arms = f'''‚ÄºÔ∏è–ú—É–∂—á–∏–Ω—ã‚ÄºÔ∏è –ú–Ω–æ–≥–æ—É–≤–∞–∂–∞–µ–º—ã–º @{message.from_user.username} —Å–æ–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è‚ÄºÔ∏è


        üìç–í—Ä–µ–º—è, –º–µ—Å—Ç–æ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞‚åöÔ∏è:{message.text.strip('/start_poll')}üìç
'''

        soccer_poll = await self.bot.send_poll(
            chat_id=message.chat.id,
            question=call_to_arms,
            options=[InputPollOption(text="–Ø –≥–æ—Ç–æ–≤"), InputPollOption(text="–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑")],
            is_anonymous=False,
        )

        await self.bot.pin_chat_message(
            chat_id=message.chat.id,
            message_id=soccer_poll.message_id
        )

        self.db.upsert(
            Polls,
            {"poll_id": soccer_poll.poll.id},
            {
                "poll_id": soccer_poll.poll.id,
                "chat_id": message.chat.id,
                "poll_message_id": soccer_poll.message_id,
                "timestamp": datetime.datetime.now(),

            }
        )


class PollFinishCommandHandler(BaseCommandHandler):
    def register(self, router: Router):
        router.message.register(self.handle_stop, Command("stop_poll"))
        router.message.register(self.handle_who, Command('who'))

    @admin_only
    async def handle_stop(self, message: Message, *args, **kwargs):
        existing_poll = self.db.get_data(
            Polls,
            {
                "chat_id": message.chat.id,
                "is_closed": False,
             }
        )

        if existing_poll:
            closed_poll = await self.bot.stop_poll(
                chat_id=message.chat.id,
                message_id=existing_poll.poll_message_id,

            )

            self.db.upsert(
                Polls,
                {
                    "poll_id": closed_poll.id,

                },
                {"is_closed": True}
            )

            poll_data = self.db.get_data(
                Polls,
                {"poll_id": closed_poll.id}
            )
            players = await players_list_extractor(poll_data.voters)

            good_guys = []
            bad_guys = []
            worst_guys = []
            for player in players.keys():
                if players[player] == 0:
                    good_guys.append(player)
                elif players[player] == 1:
                    bad_guys.append(player)
                elif players[player] == 2:
                    worst_guys.append(player)

            good_guys = '\n'.join(good_guys) if good_guys else "–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."
            bad_guys = '\n'.join(bad_guys) if bad_guys else "–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."
            worst_guys = '\n'.join(worst_guys) if worst_guys else "–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."

            final_speech = f"""
–ò —Ç–∞–∫, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π, –≥–æ–≤–Ω–æ–µ–¥–æ–≤ –∏ –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π:\n\n
–°–∏–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–µ–ª–µ:
{good_guys}

–°–ª–∞–±—ã–µ, –Ω–æ –≤–æ–ª–µ–≤—ã–µ –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–∏–ª–∏/–∑–∞–ø–∏–ª–∏:
{bad_guys}

–ò –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ, –±–µ–∑–≤–æ–ª—å–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∞ –ø–æ—Ç–æ–º —É–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å:
{worst_guys}"""
            await message.answer(final_speech)

    async def handle_who(self, message: Message, *args, **kwargs):
        existing_poll = self.db.get_data(
            Polls,
            {
                "chat_id": message.chat.id,
                "is_closed": False,
            }
        )

        if existing_poll:
            players = await players_list_extractor(existing_poll.voters)

            good_guys = []
            bad_guys = []
            worst_guys = []
            for player in players.keys():
                if players[player] == 0:
                    good_guys.append(player)
                elif players[player] == 1:
                    bad_guys.append(player)
                elif players[player] == 2:
                    worst_guys.append(player)

            good_guys = '\n'.join(good_guys) if good_guys else "–ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."
            bad_guys = '\n'.join(bad_guys) if bad_guys else "–ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."
            worst_guys = '\n'.join(worst_guys) if worst_guys else "–ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫–∏—Ö –Ω–µ—Ç..."

            final_speech = f"""
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π, –≥–æ–≤–Ω–æ–µ–¥–æ–≤ –∏ –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π:\n\n
–°–∏–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –≤ –¥–µ–ª–µ:
{good_guys}

–°–ª–∞–±—ã–µ, –Ω–æ –≤–æ–ª–µ–≤—ã–µ –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–∏–ª–∏/–∑–∞–ø–∏–ª–∏:
{bad_guys}

–ò –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ, –±–µ–∑–≤–æ–ª—å–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∞ –ø–æ—Ç–æ–º —É–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å:
{worst_guys}"""

            await message.answer(final_speech)


class CommandsHandler:
    def __init__(self, tg_bot: Bot, db: DatabaseManager):
        self.bot = tg_bot
        self.db = db
        self.router = Router()

        self._handlers = [
            StartCommandHandler(self.bot, self.db),
            PollOpenCommandHandler(self.bot, self.db),
            PollFinishCommandHandler(self.bot, self.db),

        ]

        for handler in self._handlers:
            handler.register(self.router)
